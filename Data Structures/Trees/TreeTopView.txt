/*
Problem Statement

You are given a pointer to the root of a binary tree. Print the top view of the binary tree. 
You only have to complete the function. 
For example :

     3
   /   \
  5     2
 / \   / \
1   4 6   7
 \       /
  9     8
Top View : 1 -> 5 -> 3 -> 2 -> 7
Input Format

You are given a function,

void top_view(node * root)
{

}
Output Format

Print the values on a single line separated by space.

Sample Input

     3
   /   \
  5     2
 / \   / \
1   4 6   7
 \       /
  9     8
Sample Output

1 5 3 2 7
Explanation

     3
   /   \
  5     2
 / \   / \
1   4 6   7
 \       /
  9     8
From the top only nodes 1,5,3,2 and 7 will be visible.

*/

/*
   class Node 
       int data;
       Node left;
       Node right;
*/
void top_view(Node root)
{
    if(root == null){
        return;
    }
    
   
    HashSet<Integer> h = new HashSet<Integer>();
    int max = Integer.MAX_VALUE;
    Queue<HorizontalDist> q = new ArrayDeque<HorizontalDist>();
   
    q.add(new HorizontalDist(root, 0));
    StringBuilder pos = new StringBuilder("");
    StringBuilder neg = new StringBuilder("");
    while(!q.isEmpty()){
        HorizontalDist item = q.poll();
        
        int hd = item.hd;
        Node n = item.n;
        
        if(!h.contains(hd)){
            h.add(hd);
            if(hd == 0){
                pos.append(n.data + " ");
            }
            else if(hd >> 31 != 0){
                neg.append(n.data + " ");
            }
            else{
                pos.append(n.data + " ");
            }
        }
        
        if(n.left!= null){
            q.add(new HorizontalDist(n.left, hd-1));
        }
        if(n.right!= null){
            q.add(new HorizontalDist(n.right, hd+1));
        }
    }
    
    neg.deleteCharAt(neg.length()-1);
    neg.reverse();
    System.out.println(neg+ " " + pos);
    
    
}
class HorizontalDist{
    int hd;
    Node n;
    
    HorizontalDist(Node y, int x){
        hd =x;
        n = y;
    }
    
}
